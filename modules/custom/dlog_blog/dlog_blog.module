<?php

/**
 * @file
 * Primary module hooks for DLOG - Blog article module.
 */

use Drupal\node\Entity\NodeType;
use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Component\Utility\Html;

/**
 * Implements hook_theme().
 */
function dlog_blog_theme($existing, $type, $theme, $path) {
  return [
    'dlog_blog_related_posts' => [
      'variables' => [
        'max_related_posts' => 4,
        'max_exact_same_tags_posts' => 2,
      ],
    ],
  ];
}

/**
 * Implements hook_entity_extra_field_info().
 */
function dlog_blog_entity_extra_field_info () {
  $extra = [];

    foreach (NodeType::loadMultiple() as $bundle) {
      $extra['node']['blog_article']['display']['estimated_read_time'] = [
        'label' => t('Estimated read time'),
        'weight' => 100,
        'visible' => FALSE,
      ];

      $extra['node']['blog_article']['display']['previous_next_article'] = [
        'label' => t('Buttons to previous and next blog article'),
        'weight' => 100,
        'visible' => FAlSE,
      ];

      $extra['node']['blog_article']['display']['social_share'] = [
        'label' => t('Link to share article'),
        'weight' => 100,
        'visible' => FAlSE,
      ];

      $extra['node']['blog_article']['display']['related_posts'] = [
        'label' => t('Related posts'),
        'weight' => 100,
        'visible' => FAlSE,
      ];
    }

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 */
function dlog_blog_node_view(array &$build, NodeInterface $node, EntityViewDisplayInterface $display, $view_mode) {
  $bem_block = Html::getClass('node-' . $node->bundle() . ($view_mode == 'default' ?: '-' .  $view_mode));
  if ($display->getComponent('estimated_read_time')) {
    $node_paragraphs = $node->get('field_paragraphs')->referencedEntities();
    $estimated_read_time = _dlog_blog_estimated_read_time($node_paragraphs);
    $build['estimated_read_time'] = [
      '#type' => 'inline_template',
      '#template' => '<div class="{{ bem_block }}__estimated_read_time"> {{ estimated_read_time }} min.</div>',
      '#context' => [
        'bem_block' => $bem_block,
        'estimated_read_time' => $estimated_read_time,
      ],
    ];
  }

  if ($display->getComponent('previous_next_article')) {
    $build['previous_next_article'] = [
      '#theme' => 'dlog_previous_next__blog_article',
      '#entity' => $node,
    ];
  }

  if ($display->getComponent('social_share')) {
    $build['social_share'] = [
      '#theme' => 'dlog_social_share',
      '#url' => $node->toUrl('canonical', ['absolute' => TRUE])->toString(TRUE)->getGeneratedUrl(),
      '#label' => $node->label(),
    ];
  }

  if ($display->getComponent('related_posts')) {
    $build['related_posts'] = [
      '#theme' => 'dlog_blog_related_posts',
    ];
  }
}

/**
 * Calculates estimated read time
 * @param \Drupal\paragraphs\ParagraphInterface[] $paragraphs
 *  An array with paragraphs
 * @return float
 *  The estimated real time in minutes
 */
function _dlog_blog_estimated_read_time(array $paragraphs) {
  $word_per_minute = 143;
  $estimated_read_time = 0;
  /** @var \Drupal\paragraphs\ParagraphInterface $paragraph */
  foreach ($paragraphs as $paragraph) {
    switch ($paragraph->bundle()) {
      case 'text':
        $word_count = str_word_count(strip_tags($paragraph->get('field_body')->value));
        $estimated_read_time += floor(($word_count / $word_per_minute) * 60);
        break;
      case 'gallery':
      case 'image':
        $estimated_read_time += 10;
        break;
      case 'code':
        $estimated_read_time += floor(($word_count / $word_per_minute/3) * 60);
        break;
    }
  }
  $estimated_read_time = ceil($estimated_read_time / 60);
   if ($estimated_read_time < 1 ) {
     $estimated_read_time = 1;
   }
  return $estimated_read_time;
}

/**
 * Implement hook_preprocess_HOOK for dlog-blog-related-posts.html.twig
 */
function template_preprocess_dlog_blog_related_posts (array &$variables){
  $items = [];
  /** @var \Drupal\node\NodeInterface $node */
  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node instanceof NodeInterface) {
    /** @var \Drupal\node\NodeInterface $node_storage */
    $node_storage = \Drupal::entityTypeManager()->getStorage('node');
    /** @var \Drupal\node\NodeViewBuilder $node_view_builder */
    $node_view_builder = \Drupal::entityTypeManager()->getViewBuilder('node');
    /** @var \Drupal\dlog_blog\Service\BlogManagerInterface $blog_manager */
    $blog_manager = \Drupal::service('dlog_blog.manager');
    $related_posts_ids = $blog_manager->getRelatedPosts($node, $variables['max_related_posts'], $variables['max_exact_same_tags_posts']);
          foreach ($related_posts_ids as $id) {
        /** @var NodeInterface $related_post */
        $related_post = $node_storage->load($id);
        $items[] = $node_view_builder->view($related_post, 'teaser');
      }
  }

  $variables['items'] = $items;
}
