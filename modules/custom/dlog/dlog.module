<?php

use Drupal\node\NodeInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\node\Entity\NodeType;
use Drupal\Core\Database\Query\AlterableInterface;
/**
 * @file
 * Main file for custom hooks and functions.
 */

/**
 * Implements hook_theme().
 */
function dlog_theme($existing, $type, $theme, $path) {
  return [
    'dlog_previous_next' => [
      'variables' => [
        'entity' =>NUll,
      ],
      'pattern' => 'dlog_previous_next__'
    ],
    'dlog_social_share' => [
      'variables' => [
        'url' => NULL,
        'label' => NULL,
      ]
    ],
    'dlog_label_with_icon_media_formatter' => [
      'variables' => [
        'url' => NULL,
        'label' => NULL,
        'filesize' => NULL,
        'media_type' => NULL,
        'mime_type' => NULL,
      ],
    ],
  ];
}

function template_preprocess_dlog_previous_next(&$variables) {
  /** @var \Drupal\Core\Entity\EntityInterface $entity */
  $entity = $variables['entity'];
  $variables['next'] = [];
  $variables['previous'] = [];

  /** @var \Drupal\Core\Entity\EntityStorageInterface $entity_storage */
  $entity_storage = \Drupal::entityTypeManager()
    ->getStorage($entity->getEntityTypeId());

  // Getting next entity ID.
  $next_entity_id = $entity_storage->getQuery()
    ->condition('type', $entity->bundle())
    ->condition('created', $entity->getCreatedTime(), '>')
    ->range(0, 1)
    ->sort('created', 'ASC')
    ->execute();

  if (!empty($next_entity_id)) {
    $next_entity = $entity_storage->load(array_shift($next_entity_id));

    $variables['next']['entity'] = $next_entity;
    $variables['next']['label'] = $next_entity->label();
    $variables['next']['url'] = $next_entity->toUrl()->toString(TRUE)->getGeneratedUrl();
  }

  // Getting previous entity ID.
  $previous_entity_id = $entity_storage->getQuery()
    ->condition('type', $entity->bundle())
    ->condition('created', $entity->getCreatedTime(), '<')
    ->range(0, 1)
    ->sort('created', 'DESC')
    ->execute();

  if (!empty($previous_entity_id)) {
    $previous_entity = $entity_storage->load(array_shift($previous_entity_id));

    $variables['previous']['entity'] = $previous_entity;
    $variables['previous']['label'] = $previous_entity->label();
    $variables['previous']['url'] = $previous_entity->toUrl()->toString(TRUE)->getGeneratedUrl();
  }
}

/**
 * Implements hook_imagemagick_arguments_alter().
 */
function dlog_imagemagick_arguments_alter(ImagemagickExecArguments $arguments, $command) {
  $arguments->add('-sampling-factor 4:2:0');
  $arguments->add('-interlace Plane');
  $arguments->add('-strip');
}

/**
 * Implements hook_template_preprocess_HOOK() for dlog-label-with-icon-media-formatter.html.twig.
 */
function template_preprocess_dlog_label_with_icon_media_formatter(&$variables) {
  $mimeType = $variables['mime_type'];

  $mimeAssociation = [
    'application/octet-stream' => 'application-octet-stream.svg',
    'application/zip' => 'application-zip.svg',
    'video/mp4' => 'video-mp4.svg',
    'image/jpeg' => 'image-jpeg.svg',
    'image/png' => 'image-png.svg',
    'video/x-wmv' => 'video-mp4.svg',
    'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' => 'application-vnd.ms-excel.addin.macroenabled.12.svg',
    'application/msword' => 'application-msword.svg',
    'application/pdf' => 'application-pdf.svg',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document' => 'application-vnd.openxmlformats-officedocument.wordprocessingml.document.svg',
    'audio/x-mpeg' => 'audio-x-mpeg',
    'audio/x-wav' => 'audio-x-wav.svg',
    'text/csv' => 'text-csv.svg',
    'text/plain' => 'text-plain.svg',
  ];

  $iconsPath = 	\Drupal::service('extension.list.theme')->getPath('blogger') . '/assets/images/mimetypes/';

  if (!array_key_exists($mimeType, $mimeAssociation)) {
    $currentIconFilename = 'application-octet-stream.svg';
  } else {
    $currentIconFilename = $mimeAssociation[$mimeType];
  }

  $variables['mime_icon_path'] = $iconsPath . $currentIconFilename;
}

/**
 * Implements hook_query_TAG_alter() for entity_query_random.
 */
function dlog_query_entity_query_random_alter(AlterableInterface $query) {
  $query->orderRandom();
}

